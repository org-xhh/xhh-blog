import{_ as e,c as t,o as a,a3 as s}from"./chunks/framework.C5U8cnJv.js";const m=JSON.parse('{"title":"nginx","description":"","frontmatter":{},"headers":[],"relativePath":"technology/vue/nginx.md","filePath":"technology/vue/nginx.md","lastUpdated":1719219088000}'),n={name:"technology/vue/nginx.md"},p=s(`<h1 id="nginx" tabindex="-1">nginx <a class="header-anchor" href="#nginx" aria-label="Permalink to &quot;nginx&quot;">​</a></h1><h3 id="配置-demo" tabindex="-1">配置 demo <a class="header-anchor" href="#配置-demo" aria-label="Permalink to &quot;配置 demo&quot;">​</a></h3><p>try_files 按顺序检查文件是否存在，返回第一个找到的文件，至少需要两个参数，但最后一个是内部重定向，也就是和rewrite效果一致。 可以用一个状态码 404 作为最后一个参数。</p><p>错误代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location ~.*\\.(gif|jpg|jpeg|png)$ {</span></span>
<span class="line"><span>        root /web/wwwroot;</span></span>
<span class="line"><span>        try_files /static/$uri $uri;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>原意图是访问 <a href="https://net.com/test.jpg" target="_blank" rel="noreferrer">https://net.com/test.jpg</a> 时，先去检查 /web/wwwroot/static/test.jpg 是否存在，不存在就取 /web/wwwroot/test.jpg。</p><p>但由于最后一个参数是一个内部重定向，所以并不会检查/web/wwwroot/test.jpg是否存在，只要第一个路径不存在，就会重定向，然后再进入这个location造成死循环，结果出现 500 Internal Server Error</p><p>修改之后的代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location ~.*\\.(gif|jpg|jpeg|png)$ {</span></span>
<span class="line"><span>        root /web/wwwroot;</span></span>
<span class="line"><span>        try_files /static/$uri $uri 404;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这样才会先检查 /web/wwwroot/static/test.jpg 是否存在，不存在就 /web/wwwroot/test.jpg， 再不存在则返回 404 not found</p><h3 id="举个网站例子" tabindex="-1">举个网站例子 <a class="header-anchor" href="#举个网站例子" aria-label="Permalink to &quot;举个网站例子&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location / {</span></span>
<span class="line"><span>  root html;</span></span>
<span class="line"><span>  index index.html index.htm;</span></span>
<span class="line"><span>  try_files $uri $uri/ /index.html;   // vue配置history模式需要加上这个配置</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>假设网站地址是 <a href="https://net.test" target="_blank" rel="noreferrer">https://net.test</a>，直接访问的话，浏览器会去寻找 <a href="https://net.test" target="_blank" rel="noreferrer">https://net.test</a> 所在服务器的根目录下面的 index.html。</p><p>而当我们访问 <a href="https://net.test/home" target="_blank" rel="noreferrer">https://net.test/home</a> 时，首先查找有无home文件，如果没有，再去查找有无 home 目录，如果也没有最终就会定位到第三个参数从而返回 index.html，按照这个规则，所有路由里的 url 路径最后都会定位到 index.html。</p><p>$uri/ 在这个例子中并没有多大用，是可以去掉的。</p><p>总结： Vue是单页面应用（SPA），history路由模式下，我们只需要将任意页面都重定向到 index.html，把路由交由前端处理。</p><p><a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noreferrer">vue中history模式服务器配置示例</a></p>`,17),i=[p];function o(r,l,h,c,d,g){return a(),t("div",null,i)}const _=e(n,[["render",o]]);export{m as __pageData,_ as default};
