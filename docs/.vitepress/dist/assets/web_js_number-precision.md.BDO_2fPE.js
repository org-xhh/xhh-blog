import{_ as a,c as s,o as n,a3 as e}from"./chunks/framework.DrOZDLiO.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web/js/number-precision.md","filePath":"web/js/number-precision.md","lastUpdated":1718875125000}'),p={name:"web/js/number-precision.md"},t=e(`<h3 id="浮点数的计算" tabindex="-1">浮点数的计算 <a class="header-anchor" href="#浮点数的计算" aria-label="Permalink to &quot;浮点数的计算&quot;">​</a></h3><p>加（ + ）</p><ul><li>正常计算：0.1 + 0.2 = 0.3</li><li>JavaScript 计算：0.1 + 0.2 = 0.30000000000000004</li></ul><p>减（ - ）</p><ul><li>正常计算：1 - 0.9 = 0.1</li><li>JavaScript 计算：1 - 0.9 = 0.09999999999999998</li></ul><p>乘（ * ）</p><ul><li>正常计算：0.0532 * 100 = 5.32</li><li>JavaScript 计算：0.0532 * 100 = 5.319999999999999</li></ul><p>除（ / ）</p><ul><li>正常计算：0.3 / 6 = 0.05</li><li>JavaScript 计算：0.3 / 6 = 0.049999999999999996</li></ul><h3 id="原因分析" tabindex="-1">原因分析 <a class="header-anchor" href="#原因分析" aria-label="Permalink to &quot;原因分析&quot;">​</a></h3><p>JavaScript中的浮点数计算不总是精确的，因为其采用<strong>IEEE 754</strong>标准，而这个标准<strong>基于二进制</strong>，不能精确地表示所有的十进制数字。0.1和0.2在二进制表示中是无限循环的，这就导致了精度问题。</p><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>1.使用 <a href="https://github.com/ZhangMin1998/decimal.js" target="_blank" rel="noreferrer">decimal.js</a> 或 <a href="https://github.com/ZhangMin1998/bignumber.js" target="_blank" rel="noreferrer">bignumber.js</a> 这样的库，这些库提供了处理大数和高精度的工具</p><p>2.转换成整数处理</p><p>比如</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function numberMultiply(arg1, arg2) {</span></span>
<span class="line"><span>  let m = 0</span></span>
<span class="line"><span>  let s1 = arg1.toString()</span></span>
<span class="line"><span>  let s2 = arg2.toString()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  m += s1.split(&#39;.&#39;)[1].length</span></span>
<span class="line"><span>  m += s2.split(&#39;.&#39;)[1].length</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return ((Number(s1.replace(&#39;.&#39;, &#39;&#39;)) * Number(s2.replace(&#39;.&#39;, &#39;&#39;))) / Math.pow(10, m))</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,16),l=[t];function i(r,c,o,h,u,d){return n(),s("div",null,l)}const _=a(p,[["render",i]]);export{b as __pageData,_ as default};
