import{_ as a,c as t,o as e,a3 as s}from"./chunks/framework.C5U8cnJv.js";const n="/xhh-blog/assets/image-22.C9Irtf5o.png",l="/xhh-blog/assets/image-23.mURnJOov.png",o="/xhh-blog/assets/image-24.B7V6p0q3.png",r="/xhh-blog/assets/image-25.TH8GNDMh.png",p="/xhh-blog/assets/image-26.BijYzErq.png",i="/xhh-blog/assets/image-27.iNGJvkUA.png",h="/xhh-blog/assets/image-28.DNFr0ge0.png",d="/xhh-blog/assets/image-29.Bj1aggxd.png",c="/xhh-blog/assets/image-30.myCEt0id.png",m="/xhh-blog/assets/image-34.C9Nd78o3.png",u="/xhh-blog/assets/image-35.DvX0b7VZ.png",N=JSON.parse('{"title":"Next.js","description":"","frontmatter":{},"headers":[],"relativePath":"technology/react/next.md","filePath":"technology/react/next.md"}'),g={name:"technology/react/next.md"},b=s('<h1 id="next-js" tabindex="-1">Next.js <a class="header-anchor" href="#next-js" aria-label="Permalink to &quot;Next.js&quot;">​</a></h1><table tabindex="0"><thead><tr><th>模块</th><th>版本</th></tr></thead><tbody><tr><td>node</td><td>18+</td></tr><tr><td>next</td><td>14+</td></tr><tr><td>react</td><td>18+</td></tr><tr><td>react-dom</td><td>18+</td></tr></tbody></table><h2 id="布局layout和模板template" tabindex="-1">布局Layout和模板Template <a class="header-anchor" href="#布局layout和模板template" aria-label="Permalink to &quot;布局Layout和模板Template&quot;">​</a></h2><h3 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;Layout&quot;">​</a></h3><p><img src="'+n+'" alt="alt text"></p><h3 id="template" tabindex="-1">Template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;Template&quot;">​</a></h3><p>不会保留内部状态</p><p><img src="'+l+'" alt="alt text"></p><h3 id="布局和模板区别" tabindex="-1">布局和模板区别： <a class="header-anchor" href="#布局和模板区别" aria-label="Permalink to &quot;布局和模板区别：&quot;">​</a></h3><p><img src="'+o+'" alt="alt text"><img src="'+r+'" alt="alt text"></p><p>src/app/dashboard/layout.tsx: <img src="'+p+'" alt="alt text"></p><h2 id="配置-not-found" tabindex="-1">配置 not-found <a class="header-anchor" href="#配置-not-found" aria-label="Permalink to &quot;配置 not-found&quot;">​</a></h2><ol><li>全局的 404 页面，放在 src/app 目录下</li><li>局部的 404 页面，放在 src/app/子文件目录下，页面需要 notFound() 手动触发才能跳到局部 404 页面</li></ol><h2 id="动态路由" tabindex="-1">动态路由 <a class="header-anchor" href="#动态路由" aria-label="Permalink to &quot;动态路由&quot;">​</a></h2><p><img src="'+i+`" alt="alt text"></p><h2 id="路由跳转" tabindex="-1">路由跳转 <a class="header-anchor" href="#路由跳转" aria-label="Permalink to &quot;路由跳转&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&#39;use client&#39;</span></span>
<span class="line"><span>import React from &#39;react&#39;</span></span>
<span class="line"><span>import { Button } from &#39;antd&#39;</span></span>
<span class="line"><span>import { useRouter } from &#39;next/navigation&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export default function Page() {</span></span>
<span class="line"><span>  let router = useRouter()</span></span>
<span class="line"><span>  const jump = () =&gt; {</span></span>
<span class="line"><span>    router.push(&#39;/dashboard/about&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>    &lt;Button onClick={(jump)}&gt;跳转&lt;/Button&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="metadata" tabindex="-1">Metadata <a class="header-anchor" href="#metadata" aria-label="Permalink to &quot;Metadata&quot;">​</a></h2><p><img src="`+h+'" alt="alt text"> 页面组件 List renderItem 是客户端渲染，需要在页面头部添加 &#39;use client&#39;，但是 metadata 又是服务端渲染，导致页面报错。</p><p>解决办法：服务端组件是可以导入客户端组件的，把blog列表封装为一个组件（带有 &#39;use client&#39;），然后blog页面导入该组件即可。 <img src="'+d+'" alt="alt text"></p><h3 id="动态-metadata" tabindex="-1">动态 Metadata <a class="header-anchor" href="#动态-metadata" aria-label="Permalink to &quot;动态 Metadata&quot;">​</a></h3><p><img src="'+c+'" alt="alt text"></p><h2 id="拦截路由" tabindex="-1">拦截路由 <a class="header-anchor" href="#拦截路由" aria-label="Permalink to &quot;拦截路由&quot;">​</a></h2><p>同一个地址以不同的方式打开 展示的内容不一样</p><ul><li>以软链接的形式打开：点击图片打开大图，url地址后面路径变了</li></ul><p><a href="https://test.com" target="_blank" rel="noreferrer">https://test.com</a> =&gt; 点击图片 =&gt; <a href="https://test.com/photos/1" target="_blank" rel="noreferrer">https://test.com/photos/1</a></p><ul><li>以硬链接的形式打开：输入 url 直接回车，只展示图片信息了</li></ul><p><a href="https://test.com/photos/1" target="_blank" rel="noreferrer">https://test.com/photos/1</a></p><p>文档： <img src="'+m+'" alt="alt text"></p><h2 id="中间件-middleware" tabindex="-1">中间件 Middleware <a class="header-anchor" href="#中间件-middleware" aria-label="Permalink to &quot;中间件 Middleware&quot;">​</a></h2><p><img src="'+u+'" alt="alt text"></p>',31),x=[b];function _(f,q,k,y,P,v){return e(),t("div",null,x)}const j=a(g,[["render",_]]);export{N as __pageData,j as default};
