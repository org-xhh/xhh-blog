import{_ as e,c as o,o as a,a3 as i}from"./chunks/framework.C5U8cnJv.js";const t="/xhh-blog/assets/image-4.Ba4bqtLi.png",g=JSON.parse('{"title":"cookie、localStorage、sessionStorage","description":"","frontmatter":{},"headers":[],"relativePath":"web/js/浏览器存储方式.md","filePath":"web/js/浏览器存储方式.md"}'),l={name:"web/js/浏览器存储方式.md"},s=i(`<h1 id="cookie、localstorage、sessionstorage" tabindex="-1">cookie、localStorage、sessionStorage <a class="header-anchor" href="#cookie、localstorage、sessionstorage" aria-label="Permalink to &quot;cookie、localStorage、sessionStorage&quot;">​</a></h1><h3 id="cookie-属性" tabindex="-1">Cookie 属性 <a class="header-anchor" href="#cookie-属性" aria-label="Permalink to &quot;Cookie 属性&quot;">​</a></h3><ul><li><p>Expires 和 Max-Age：Cookie的过期时间</p></li><li><p>Domain：Cookie的作用域，默认是当前域名</p></li><li><p>Path：只有特定目录下的页面才可以读取Cookie</p></li><li><p>Secure：设置Secure属性，确保Cookie仅在HTTPS连接中传输</p></li><li><p>HttpOnly：标记为HttpOnly的Cookie不能被JavaScript访问，减少XSS攻击风险</p></li><li><p>SameSite：防止CSRF攻击，取值： Strict、Lax、None。</p><p>SameSite有三个属性：</p><ul><li>‌Strict‌：当网址与请求域名完全一致时，Cookie才会被发送；</li><li>‌Lax‌：在跨站点的情况下，只有对GET请求才会发送Cookie，而对于POST请求等非安全的HTTP方法则不会发送；</li><li>‌None‌：无论是跨站点还是同站点，Cookie都会被发送。当设置SameSite=None时，必须同时设置Secure属性，以确保Cookie只能通过HTTPS发送。</li></ul></li></ul><h3 id="存储方式区别" tabindex="-1">存储方式区别 <a class="header-anchor" href="#存储方式区别" aria-label="Permalink to &quot;存储方式区别&quot;">​</a></h3><h4 id="存储大小" tabindex="-1">存储大小 <a class="header-anchor" href="#存储大小" aria-label="Permalink to &quot;存储大小&quot;">​</a></h4><ul><li>Cookie：单个 Cookie 的大小限制在 4KB 左右；</li><li>LocalStorage：存储容量为 5MB 左右；</li><li>SessionStorage：一般也是 5MB 左右；</li></ul><h4 id="数据有效期" tabindex="-1">数据有效期 <a class="header-anchor" href="#数据有效期" aria-label="Permalink to &quot;数据有效期&quot;">​</a></h4><ul><li><p>Cookie：如果设置了过期时间，Cookie 会在指定时间后自动删除；如果没有设置过期时间，关闭浏览器就会被清空；</p></li><li><p>LocalStorage：数据会一直存储在浏览器中，除非手动清除；</p></li><li><p>SessionStorage：数据仅在当前会话期间有效，如果用户关闭当前标签页，SessionStorage 中的数据会被清除；</p><p>通过 window.open 新建标签页后可以在新建会话时复制上一个会话，之后两个 sessionStorage 相互独立。</p></li></ul><h4 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h4><ul><li><p>Cookie：网址和接口域名同源时，异步请求头里会自动携带 Cookie；服务器也可以修改 Cookie 并将其返回给客户端；</p><p>跨域请求时，异步请求(axios)需要设置 withCredentials: true</p></li><li><p>LocalStorage：数据仅存储在客户端，不会随 HTTP 请求发送到服务器；</p></li><li><p>SessionStorage：数据只存储在客户端，不会在请求中传输；</p></li></ul><h4 id="访问权限" tabindex="-1">访问权限 <a class="header-anchor" href="#访问权限" aria-label="Permalink to &quot;访问权限&quot;">​</a></h4><ul><li>Cookie：可以通过 JavaScript 的 document.cookie 属性进行读写操作；</li></ul><p>JS设置Cookie：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const cookieExpirationHours = 7 * 24 // 7天后过期</span></span>
<span class="line"><span>const expiresIn = new Date(Date.now() + cookieExpirationHours * 60 * 60 * 1000)</span></span>
<span class="line"><span>document.cookie = &quot;username=cookieName; expires=&quot; + expiresIn + &quot;; path=/; Secure; HttpOnly; SameSite=Strict&quot;</span></span></code></pre></div><p><img src="`+t+'" alt="alt text"></p><ul><li>LocalStorage：通过 JavaScript 的 localStorage 对象访问，不同域名下的 LocalStorage 是相互隔离的；</li><li>SessionStorage：通过 JavaScript 的 sessionStorage 对象访问，同样遵循同源策略；</li></ul><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><ul><li>Cookie：常用于存储用户的登录信息、用户偏好设置等；</li><li>LocalStorage：适合存储一些不经常变化的数据，由于其数据持久性，用户下次访问页面时可以快速恢复之前的状态；</li><li>SessionStorage：适用于临时保存同一窗口（或标签页）的数据，在关闭窗口（或标签页）后数据不需要保留的场景；</li></ul>',18),r=[s];function n(c,p,h,S,u,d){return a(),o("div",null,r)}const _=e(l,[["render",n]]);export{g as __pageData,_ as default};
