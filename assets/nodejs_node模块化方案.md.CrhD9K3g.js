import{_ as a,c as s,o as e,a3 as n}from"./chunks/framework.C5U8cnJv.js";const _=JSON.parse('{"title":"模块化方案","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/node模块化方案.md","filePath":"nodejs/node模块化方案.md"}'),o={name:"nodejs/node模块化方案.md"},t=n(`<h1 id="模块化方案" tabindex="-1">模块化方案 <a class="header-anchor" href="#模块化方案" aria-label="Permalink to &quot;模块化方案&quot;">​</a></h1><h2 id="_1-commonjs" tabindex="-1">1. CommonJS <a class="header-anchor" href="#_1-commonjs" aria-label="Permalink to &quot;1. CommonJS&quot;">​</a></h2><p>require() 导入、module.exports 导出</p><p>项目默认是 CommonJS 规范，指定文件后缀为 .cjs后，此文件会遵守CommonJS 规范。</p><h2 id="_2-es-modules" tabindex="-1">2. ES Modules <a class="header-anchor" href="#_2-es-modules" aria-label="Permalink to &quot;2. ES Modules&quot;">​</a></h2><p>（也被称为ES6 Modules、ECMA Modules、ESM）</p><p>import 导入、export 导出</p><p>在Node.js中使用ESM，需要在package.json中设置&quot;type&quot;: &quot;module&quot;，或者文件名后缀为.mjs。</p><h2 id="两种模块方案互相加载" tabindex="-1">两种模块方案互相加载 <a class="header-anchor" href="#两种模块方案互相加载" aria-label="Permalink to &quot;两种模块方案互相加载&quot;">​</a></h2><ul><li>CommonJS 加载 ESM</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const tm = require( &#39;./index.mjs&#39;) // ❌ (node.js 22.0.0及以上才可以，实验性)</span></span>
<span class="line"><span>const tm = await import( &#39;./index.mjs&#39;) // ✅</span></span></code></pre></div><ul><li>ESM 加载 CommonJS</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { someCon } from&#39;./index.cjs&#39; // ❌ 只能整体加载</span></span>
<span class="line"><span>import tm from&#39;./index.cjs&#39; // ✅</span></span></code></pre></div><p><small>ESM模块会静态分析，而 CommonJS 模块的代码是无法进行静态分析的，所以只能整体加载。</small></p><h2 id="同时支持两种模块方式" tabindex="-1">同时支持两种模块方式 <a class="header-anchor" href="#同时支持两种模块方式" aria-label="Permalink to &quot;同时支持两种模块方式&quot;">​</a></h2><p>咱们开发npm包时，可能需要同时适配 CommonJS 和 ES Modules：</p><ul><li>在package.json中使用 &quot;main&quot; 和 &quot;module&quot; 字段分别指定 CommonJS 和 ES Modules的入口文件</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;main&quot;: &quot;lib/index.js&quot;,</span></span>
<span class="line"><span>    &quot;module&quot;: &quot;src/index.mjs&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>package.json中设置 exports 字段</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;exports&quot;：{ </span></span>
<span class="line"><span>    &quot;require&quot;: &quot;./index.js&quot;，</span></span>
<span class="line"><span>    &quot;import&quot;: &quot;./esm/index.js&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="全局变量获取" tabindex="-1">全局变量获取 <a class="header-anchor" href="#全局变量获取" aria-label="Permalink to &quot;全局变量获取&quot;">​</a></h2><p>ESM环境中，传统的 CommonJS 全局变量 __dirname 和 __filename 不再直接可用。 这是因为 ES Modules 采用不同的模块解析策略，更加符合 ECMAScript 标准。</p><p>ESM 中获取__dirname、__filename：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import { fileURLToPath } from &#39;node:url&#39;</span></span>
<span class="line"><span>import { dirname } from &#39;node:path&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const __filename = fileURLToPath(import.meta.url)</span></span>
<span class="line"><span>const __dirname = dirname(fileURLToPath(import.meta.url))</span></span></code></pre></div><ul><li>import.meta： 当前模块信息的对象</li><li>fileURLToPath()：将 URL 字符串转换为对应的本地文件系统路径</li><li>dirname()：接受一个文件路径作为参数，返回该路径的目录部分</li></ul>`,25),i=[t];function p(l,d,c,r,u,m){return e(),s("div",null,i)}const q=a(o,[["render",p]]);export{_ as __pageData,q as default};
